
Ваша задача:
Если вы решали старую версию задачи, проверка будет производиться по ней.
Ссылка на старую версию тут.
Цель: применить базовые знания о наследовании классов для решения задачи
Задача "Съедобное, несъедобное":
Разнообразие животного мира давно будоражит умы человечества. Царства, классы, виды... Почему бы и нам не попробовать выстроить что-то подобное используя наследования классов?
Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.
Создайте:
2 класса родителя: Animal, Plant
Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный), name - индивидуальное название каждого животного.
Для класса Plant атрибут edible = False(съедобность), name - индивидуальное название каждого растения
4 класса наследника:
Mammal, Predator для Animal.
Flower, Fruit для Plant.
У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
eat(self, food) - метод, где food - это параметр, принимающий объекты классов растений.
Метод eat должен работать следующим образом:
Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>", меняется атрибут fed на True.
Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>", меняется атрибут alive на False.
Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.
У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)
Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.
Пункты задачи:
Создайте классы Animal и Plant с соответствующими атрибутами и методами
Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами. При необходимости переопределите значения атрибутов.
Создайте объекты этих классов.
Пример результата выполнения программы:
Выполняемый код(для проверки):
a1 = Predator('Волк с Уолл-Стрит')
a2 = Mammal('Хатико')
p1 = Flower('Цветик семицветик')
p2 = Fruit('Заводной апельсин')
print(a1.name)
print(p1.name)
print(a1.alive)
print(a2.fed)
a1.eat(p1)
a2.eat(p2)
print(a1.alive)
print(a2.fed)

class Animal: # Animal: базовый класс для животных. Имеет переменные класса alive и fed
    alive = True
    fed = False

    def __init__(self, name):#  Метод init устанавливает имя животного
        self.name = name

    def eat(self, food):# метод eat позволяет животному есть растения и проверяет, съедобное ли оно.
        if isinstance(food, Plant):
            if food.edible:
                print(f"{self.name} сЪел {food.name}")
                self.fed = True
            else:
                print(f"{self.name} не стал есть {food.name}")
                self.alive = False
        else:
            print(f"{self.name} не может есть {food} ")

# Mammal, Predator: наследуются от класса Animal,
class Mammal(Animal):
    pass
class Predator(Animal):
    pass
class Plant:# Plant: базовый класс для растений, по умолчанию экземпляры несъедобны.
    edible = False

    def __init__(self, name): # Метод init устанавливает имя растения.
        self.name = name

#  Flower и Fruit: наследуются от Plant.
class Flower(Plant):
    pass
class Fruit(Plant):
    def __init__(self, name): #  В классе Fruit метод init также устанавливает свойство edible в True.
        super().__init__(name)
        self.edible = True

a1 = Predator('Волк с Уолл-Стрит')
a2 = Mammal('Хатико')
p1 = Flower('Цветик семицветик')
p2 = Fruit('Заводной апельсин')
print(a1.name)
print(p1.name)
print(a1.alive)
print(a2.fed)
a1.eat(p1)
a2.eat(p2)
print(a1.alive)
print(a2.fed)
